rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.type == 'admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isViewer() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.type in ['admin', 'viewer'] &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isUserActive() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isOwnerOrAdmin(userId) {
      return isAuthenticated() && (
        request.auth.uid == userId || isAdmin()
      );
    }
    
    function hasBusinessAccess(businessId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.businessId == businessId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isBusinessAuthorized(businessId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/businesses/$(businessId)) &&
             request.auth.uid in get(/databases/$(database)/documents/businesses/$(businessId)).data.authorizedUsers;
    }
    
    // System settings collection - allows unauthenticated read for admin check
    match /system/settings {
      // Allow reading system settings to check if admins exist
      allow read: if true;
      // Only admins can write system settings
      allow write: if isAdmin();
    }
    
    // Users collection - Admin and user management
    match /users/{userId} {
      // Users can read their own document, admins can read all
      // Also allow limited read access to check if any admin users exist (for setup flow)
      allow read: if request.auth.uid == userId || isAdmin() || 
                    // Allow reading user role info to check for admin existence
                    (request.auth == null && 'role' in resource.data && 'type' in resource.data.role);
      
      // Users can update their own profile, admins can update any profile
      allow update: if isOwnerOrAdmin(userId) && 
                    // Prevent role escalation by non-admins
                    (isAdmin() || 
                     (!('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
                      !('isActive' in request.resource.data.diff(resource.data).affectedKeys())));
      
      // Only admins can create new users or delete users
      // Also allow creating the first admin user when no admins exist
      allow create: if isAdmin() || 
                      (request.auth != null && 
                       request.resource.data.role.type == 'admin' &&
                       !exists(/databases/$(database)/documents/system/adminCount));
      
      allow delete: if isAdmin();
    }
    
    // Invitations collection - stores user invitation data
    match /invitations/{invitationId} {
      // Only admins can manage invitations
      allow read, write: if isAdmin();
    }
    
    // Top-level ingredients collection - for system-wide ingredients
    match /ingredients/{ingredientId} {
      // Admins can manage all ingredients, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Top-level suppliers collection - for system-wide suppliers
    match /suppliers/{supplierId} {
      // Admins can manage all suppliers, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Stock history collection - for ingredient stock tracking
    match /stockHistory/{stockHistoryId} {
      // Admins can manage all stock history, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Stock history collection (with underscore) - for ingredient stock tracking
    match /stock_history/{stockHistoryId} {
      // Admins can manage all stock history, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Price history collection - for ingredient price tracking
    match /priceHistory/{priceHistoryId} {
      // Admins can manage all price history, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Top-level recipes collection - for system-wide recipes
    match /recipes/{recipeId} {
      // Admins can manage all recipes, viewers can read
      allow read: if isViewer();
      allow write: if isAdmin();
    }
    
    // Businesses collection - Business entity management
    match /businesses/{businessId} {
      // Admins can read all, authorized users can read their business
      allow read: if isAdmin() || isBusinessAuthorized(businessId);
      
      // Only admins can create/update/delete business documents
      allow create, update, delete: if isAdmin();
      
      // Business sub-collections
      match /clients/{clientId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
      
      match /ingredients/{ingredientId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
      
      match /recipes/{recipeId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
      
      match /vendors/{vendorId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
      
      match /orders/{orderId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
      
      match /reports/{reportId} {
        // Admins can access all, business users can access their business data
        allow read, write: if isAdmin() || hasBusinessAccess(businessId) || isBusinessAuthorized(businessId);
      }
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    match /audit/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}