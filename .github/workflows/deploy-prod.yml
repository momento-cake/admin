name: Deploy to Production

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      NODE_VERSION: '20'
      FIREBASE_PROJECT: momentocake-admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: prod
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_PROD }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID_PROD }}

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Firestore Rules
        run: |
          firebase use ${{ env.FIREBASE_PROJECT }}
          firebase deploy --only firestore:rules --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Rules
        run: |
          firebase use ${{ env.FIREBASE_PROJECT }}
          firebase deploy --only storage:rules --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore Indexes
        run: |
          firebase use ${{ env.FIREBASE_PROJECT }}
          firebase deploy --only firestore:indexes --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase Hosting
        run: |
          firebase use ${{ env.FIREBASE_PROJECT }}
          firebase deploy --only hosting --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = 'https://${{ env.FIREBASE_PROJECT }}.web.app'
            const tagName = context.ref.replace('refs/tags/', '')
            
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: `üöÄ Production deployment successful!\n\nüìù Application URL: ${deployUrl}\n\n## Changes\nThis release includes all changes from the main branch.`,
              draft: false,
              prerelease: false
            })

      - name: Notify deployment
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const deployUrl = 'https://${{ env.FIREBASE_PROJECT }}.web.app'
            console.log(`üöÄ Production deployment successful!`)
            console.log(`üìù Application URL: ${deployUrl}`)